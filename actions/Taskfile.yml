# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
version: '3'

vars:
  KUBE:
    sh: ../detect.sh
  WHISK: '{{default "whisk" .WHISK}}'
  CONFIG: "../tests/{{.KUBE}}/{{.WHISK}}.yaml"
  APIHOST: 
    sh: kubectl -n nuvolaris get cm/config -o yaml | awk '/apihost:/ {print $2}'
  SYSTEM:
    sh: kubectl -n nuvolaris get wsk/controller -o jsonpath='{.spec.openwhisk.namespaces.whisk-system}'
  WSKSYS: wsk --apihost {{.APIHOST}} -u {{.SYSTEM}}
  DEPLOY: ../deploy/whisk-system
  CDB_USER:
    sh: yq .spec.couchdb.admin.user {{.CONFIG}}
  CDB_PASSWORD:
    sh: yq .spec.couchdb.admin.password {{.CONFIG}}
  CDB_HOST:
    sh: yq .spec.couchdb.host {{.CONFIG}}
  MINIO_HOST: minio.nuvolaris.svc.cluster.local   
  MINIO_PORT: 9000    

tasks:

  list: "{{.WSKSYS}} action list"

  activation:list: "{{.WSKSYS}} activation list"

  activation:get: "{{.WSKSYS}} activation get {{.ID}}"

  invoke: "{{.WSKSYS}} action invoke -r {{.CLI_ARGS}}"

  config: wsk property set --apihost '{{.APIHOST}}' -u '{{.SYSTEM}}'

  echo:
    - zip -j {{.DEPLOY}}/echo.zip echo/*
    - "{{.WSKSYS}} action update echo {{.DEPLOY}}/echo.zip --kind python:3"

  login:prepare:
    - |- 
      mkdir -p login/nuvolaris
      cp ../nuvolaris/config.py ../nuvolaris/couchdb_util.py login/nuvolaris
    - |-
      cd login
      rm  -f ../{{.DEPLOY}}/login.zip
      zip -r ../{{.DEPLOY}}/login.zip *

  login:deploy:
    - > 
      {{.WSKSYS}} package update nuv
      -p couchdb_user "{{.CDB_USER}}"
      -p couchdb_password "{{.CDB_PASSWORD}}"
      -p couchdb_host "{{.CDB_HOST}}"  
    - > 
      {{.WSKSYS}} action update nuv/login 
      {{.DEPLOY}}/login.zip --kind python:3 --web true
    - > 
      {{.WSKSYS}} action get nuv/login --url

  upload:prepare:
    - |- 
      mkdir -p upload/common
      cp ./common/minio_util.py upload/common      
    - |-
      cd upload
      rm  -f ../{{.DEPLOY}}/upload.zip
      zip -r ../{{.DEPLOY}}/upload.zip *

  upload:deploy:
    - task: upload:prepare
    - > 
      {{.WSKSYS}} package update nuv
      -p minio_host {{.MINIO_HOST}}
      -p minio_port {{.MINIO_PORT}}  
    - > 
      {{.WSKSYS}} action update nuv/upload 
      {{.DEPLOY}}/upload.zip --kind python:3 --web true
    - > 
      {{.WSKSYS}} action get nuv/upload --url

  devel:redis:prepare:
    - |- 
      mkdir -p devel/redis/nuvolaris
      mkdir -p devel/redis/common
      cp ./common/*.py devel/redis/common
      cp ../nuvolaris/config.py ../nuvolaris/couchdb_util.py devel/redis/nuvolaris
    - |-
      cd devel/redis
      rm  -f ../../{{.DEPLOY}}/redis.zip
      zip -r ../../{{.DEPLOY}}/redis.zip *

  devel:redis:deploy:
    - task: devel:redis:prepare
    - > 
      {{.WSKSYS}} package update nuv
      -p couchdb_user "{{.CDB_USER}}"
      -p couchdb_password "{{.CDB_PASSWORD}}"
      -p couchdb_host "{{.CDB_HOST}}"
    - > 
      {{.WSKSYS}} action update nuv/redis
      {{.DEPLOY}}/redis.zip --kind python:3 --web raw
    - > 
      {{.WSKSYS}} action get nuv/redis --url  

  devel:psql:prepare:
    - |- 
      mkdir -p devel/psql/nuvolaris
      mkdir -p devel/psql/common
      cp ./common/*.py  devel/psql/common
      cp ../nuvolaris/config.py ../nuvolaris/couchdb_util.py devel/psql/nuvolaris
    - |-
      cd devel/psql
      rm  -f ../../{{.DEPLOY}}/psql.zip
      zip -r ../../{{.DEPLOY}}/psql.zip *

  devel:psql:deploy:
    - task: devel:psql:prepare
    - > 
      {{.WSKSYS}} package update nuv
      -p couchdb_user "{{.CDB_USER}}"
      -p couchdb_password "{{.CDB_PASSWORD}}"
      -p couchdb_host "{{.CDB_HOST}}"
    - > 
      {{.WSKSYS}} action update nuv/psql
      {{.DEPLOY}}/psql.zip --kind python:3 --web raw
    - > 
      {{.WSKSYS}} action get nuv/psql --url 

  devel:minio:prepare:
    - |- 
      mkdir -p devel/minio/nuvolaris
      mkdir -p devel/minio/common
      cp ./common/*.py  devel/minio/common
      cp ../nuvolaris/config.py ../nuvolaris/couchdb_util.py devel/minio/nuvolaris
    - |-
      cd devel/minio
      rm  -f ../../{{.DEPLOY}}/minio.zip
      zip -r ../../{{.DEPLOY}}/minio.zip *

  devel:minio:deploy:
    - task: devel:minio:prepare
    - > 
      {{.WSKSYS}} package update nuv
      -p couchdb_user "{{.CDB_USER}}"
      -p couchdb_password "{{.CDB_PASSWORD}}"
      -p couchdb_host "{{.CDB_HOST}}"
    - > 
      {{.WSKSYS}} action update nuv/minio
      {{.DEPLOY}}/minio.zip --kind python:3 --web raw
    - > 
      {{.WSKSYS}} action get nuv/minio --url 

  devel:upload:prepare:
    - |- 
      mkdir -p devel/upload/nuvolaris
      mkdir -p devel/upload/common
      cp ./common/*.py  devel/upload/common
      cp ../nuvolaris/config.py ../nuvolaris/couchdb_util.py devel/upload/nuvolaris
    - |-
      cd devel/upload
      rm  -f ../../{{.DEPLOY}}/devel_upload.zip
      zip -r ../../{{.DEPLOY}}/devel_upload.zip *

  devel:upload:deploy:
    - task: devel:upload:prepare
    - > 
      {{.WSKSYS}} package update nuv
      -p couchdb_user "{{.CDB_USER}}"
      -p couchdb_password "{{.CDB_PASSWORD}}"
      -p couchdb_host "{{.CDB_HOST}}"
    - > 
      {{.WSKSYS}} action update nuv/devel_upload
      {{.DEPLOY}}/devel_upload.zip --kind python:3 --web raw
    - > 
      {{.WSKSYS}} action get nuv/devel_upload --url                                    

  login:webtest:
    - >
      curl -X POST {{.APIHOST}}/api/v1/web/whisk-system/nuv/login -H "Content-Type: application/json" -d '{"login": "{{.USERNAME}}", "password": "{{.PASSWORD}}"}'

  login:webproxy:
    - >
      curl -X POST http://localhost/api/v1/web/whisk-system/nuv/login -H "Content-Type: application/json" -d '{"login": "{{.USERNAME}}", "password": "{{.PASSWORD}}"}'

  login:k3sproxy:
    - >
      curl -X POST https://gptuser.api.k3s.nuvtest.net/api/v1/web/whisk-system/nuv/login -H "Content-Type: application/json" -d '{"login": "{{.USERNAME}}", "password": "{{.PASSWORD}}"}'

  upload:webtest:
    - >
      curl -X PUT -T ../nuvolaris/templates/index.html -H "minioauth: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG" {{.APIHOST}}/api/v1/web/whisk-system/nuv/upload/nuvolaris/index2.html

  upload:webtest2:
    - >
      curl -X PUT -T ../nuvolaris/templates/content.html -H "minioauth: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG" {{.APIHOST}}/api/v1/web/whisk-system/nuv/upload/nuvolaris/tidy/content.html

  upload:chess:
    - >
      curl -X PUT -T ../nuvolaris/templates/content.html -H "minioauth: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG" {{.APIHOST}}/api/v1/web/whisk-system/nuv/upload/nuvolaris/chess/index.html

  devel:redis:set:
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/redis -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/redis_set.json

  devel:redis:get:
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/redis -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/redis_get.json 

  devel:psql:select:
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/psql -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/psql_select.json 

  devel:psql:desc:
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/psql -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/psql_desc.json

  devel:psql:create:
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/psql -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/psql_create1.json 
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/psql -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/psql_create2.json                        
    - >
      curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/psql -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/psql_create3.json        

  devel:minio:ls:
      - >
        curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/minio -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/minio_buckets.json       

  devel:minio:lsb:
      - >
        curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/minio -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/minio_ls.json               

  devel:minio:rm:
      - >
        curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/minio -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/minio_rm.json 

  devel:minio:mv:
      - >
        curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/minio -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/minio_mv.json 

  devel:minio:cp:
      - >
        curl {{.APIHOST}}/api/v1/web/whisk-system/nuv/minio -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk"  -H "Content-Type: application/json" -d@../demos/devel/minio_cp.json 

  devel:upload:webtest:
    - >
      curl -X PUT -T ../nuvolaris/templates/content.html -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk" {{.APIHOST}}/api/v1/web/whisk-system/nuv/devel_upload/nuvolaris-web/test/index.html

  devel:upload:data:
    - >
      curl -X PUT -T ../nuvolaris/templates/content.html -H "x-impersonate-auth: bnV2b2xhcmlzOm51dnBhc3N3MHJk" {{.APIHOST}}/api/v1/web/whisk-system/nuv/devel_upload/nuvolaris-dataa/test/index.html




  login:all:
    - task: login:prepare
    - task: login:deploy
    - task: login:webtest

  upload:all:
    - task: upload:prepare
    - task: upload:deploy   

  # prepares all the system related actions
  prepare:
    - task: login:prepare
    - task: upload:prepare

  deploy:
    - task: login:deploy
    - task: upload:deploy

  all:
    - task: prepare
    - task: deploy        
                    
