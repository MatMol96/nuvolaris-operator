# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import nuvolaris.config as cfg
import nuvolaris.testutil as tu
import nuvolaris.openwhisk_standalone as ow
import nuvolaris.couchdb as cdb
import nuvolaris.kube as kube
import os

!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all

tu.load_image_env()
assert(cfg.configure(tu.load_sample_config()))
cfg.detect()
cfg.put("couchdb.host", "couchdb")
cdb.create(None)
!kubectl -n nuvolaris wait --for=condition=complete job/couchdb-init --timeout=600s


assert(cfg.put("controller.image","ghcr.io/nuvolaris/openwhisk-controller"))
assert(cfg.put("controller.tag","0.3.0-morpheus.22122609"))
assert(cfg.put("components.invoker",False))

!kubectl apply -f deploy/nuvolaris-permissions/nuvolaris-common.yaml
!kubectl apply -f deploy/nuvolaris-permissions/openwhisk-core-roles.yaml
!kubectl apply -f deploy/nuvolaris-permissions/openwhisk-runtimes-cm.yaml
!kubectl apply -f deploy/nuvolaris-permissions/whisk-crd.yaml
!kubectl apply -f tests/whisk.yaml

wsk = kube.get("wsk/controller")

ow.create(wsk)
assert(kube.get("statefulset.apps/controller"))

cfg_value = kube.kubectl("get", "statefulset.apps/controller", jsonpath="{.spec.template.spec.containers[0].env[?(@.name=='LIMITS_ACTIONS_INVOKES_PERMINUTE')].value}")
exp_value = cfg.get("configs.limits.actions.invokes-perMinute")
assert(f"{exp_value}" in cfg_value)

ow.delete()
!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all